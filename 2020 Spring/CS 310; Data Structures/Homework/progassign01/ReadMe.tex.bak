\documentclass{article}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{bm}
\usepackage{amsthm}
\usepackage{enumerate}
\usepackage{graphicx}
\usepackage{psfrag}
\usepackage{color}
\usepackage{url}
\usepackage{listings}
\usepackage{xcolor}

\definecolor{codegreen}{rgb}{0,0.5,0}
\definecolor{codewhite}{rgb}{1,1,1}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{codeblack}{rgb}{0,0,0}
\definecolor{codeorange}{rgb}{0.8,0.4,0}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{codewhite},   
    commentstyle=\color{codegray},
    keywordstyle=\color{codegreen},
    numberstyle=\color{codegray},
    stringstyle=\color{codeorange},
    basicstyle=\ttfamily ,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=4
}
\lstset{style=mystyle}


\setlength{\hoffset}{-1in}
\addtolength{\textwidth}{1.5in}
\setlength{\voffset}{-1in}
\addtolength{\textheight}{1.5in}
\newcommand{\be}{\begin{enumerate}}
\newcommand{\ee}{\end{enumerate}}
\newcommand{\BigO}[1]{\ensuremath\mathcal{O}\left(#1\right)}
\newcommand{\il}[1]{\lstinline!#1!}

\begin{document}
	\begin{center}
		\textbf{Spring 2020, CS 310:\ Program 1 ReadMe} \\
		\textbf{Due:\ Friday, March 6th, 2020} \\
		\textbf{Joseph Diaz: 819947915}
	\end{center}
\noindent\makebox[\linewidth]{\rule{\paperwidth}{0.4pt}}
\section*{Package Structure}
The package structure of the jar file is as follows:\\\\
\begin{large}
\il{progassign01}
\end{large}
\begin{itemize}
	\item \il{Container}
	\begin{itemize}
		\item \il{LLStack.class}
		\item \il{LLStack.java}
		\item \il{Node.class}
		\item \il{Node.java}
		\item \il{StackQ.class}
		\item \il{StackQ.java}
	\end{itemize}
	
	\item \il{Data}
	\begin{itemize}
		\item \il{DataClass.class}
		\item \il{DataClass.java}
	\end{itemize}
	
	\item \il{Driver}
	\begin{itemize}
		\item \il{Driver.class}
		\item \il{Driver.java}
	\end{itemize}
	
	\item \il{Interface}
	\begin{itemize}
		\item \il{QueueSpecs.class}
		\item \il{QueueSpecs.java}
		\item \il{StackSpecs.class}
		\item \il{StackSpecs.java}
	\end{itemize}
	\item \il{META-INF}
	\begin{itemize}
		\item \il{MANIFEST.MF}
	\end{itemize}
\end{itemize}
As can be seen, all files under the \il{progassign01} package. All import make use of the ``dot'' operator to properly reference the correct file in the package for use. \il{LLStack} and \il{StackQ} implement \il{StackSpecs} and \il{QueueSpecs}, respectively, while \il{StackQ} uses \il{LLStack} for it's internal structures and the \il{Driver} uses \il{StackQ} and \il{DataClass} for it's operations. \il{StackQ} and \il{LLStack} both use generics, so \il{DataClass} is the parameter we are using in \il{Driver} for the \il{StackQ}.
\pagebreak

\section*{Classes}
\subsection*{\il{StackSpecs<E>}}
This class contains the following method definitions that \il{LLStack} implements:
\begin{itemize}
	\item\il{public boolean isEmpty()}
	\item\il{public void emptyStack()}
	\item\il{public void push(E obj)}
	\item\il{public E pop()}
	\item\il{public E peek()}
\end{itemize}
\subsection*{\il{Node<E>}}
\begin{itemize}

	\item\il{private E data}\\
		The parameterized data that \il{Node} holds.
	\item\il{private Node<E> nextNode}\\
		The next \il{Node} after this \il{Node} as part of the linked list.
	\item\il{public Node()}\\
		The default constructor for \il{Node}. Calls \il{public Node(E data, Node<E> node)} with \il{(null, null)}.
	\item\il{public Node(E data)}\\
		One argument constructor for \il{Node}. Calls \il{public Node(E data, Node<E> node)} with \il{(data, null)}.
	\item\il{public Node(E data, Node<E> node)}\\
		Two argument constructor for \il{Node}. It assigns the arguments values to \il{data} and \il{nextNode}, respectively. 
	\item\il{public E getData()}\\
		Getter for \il{data}, returns the value \il{data} contains.
	\item\il{public void setData(E data)}\\
		Setter for \il{data}, sets \il{this.data} to \il{data}.
	\item\il{public Node<E> getNextNode()}\\
		Getter for \il{nextNode}, returns the reference for \il{nextNode}.
	\item\il{public void setNextNode(Node<E> nextNode)}\\
		Setter for \il{nextNode}, sets the reference of \il{this.nextNode} to the reference of \il{nextNode}.
\end{itemize}
\subsection*{\il{LLStack<E>}}
\begin{itemize}
	\item\il{private Node<E> top}\\
		The node that holds the top element of the stack, it has a reference for the next node, which contains a reference for the next node, and so on.
	\item\il{private int stackSize}\\
		The number of elements in the stack/linked list.
	\item\il{public LLStack()}\\
		Default constructor for \il{LLStack}.
	\item\il{public LLStack(Node<E> top, int stackSize)}\\
		Constructor with initial node and stackSize.
	\item\il{public Node<E> getTop()}\\
		Returns the current \il{top}.
	\item\il{public void setTop(Node<E> newTop)}\\
		Sets \il{this.top} to \il{newTop}.
	\item\il{public int getStackSize()}\\
		Returns the size of \il{LLStack}.
	\item\il{public void setStackSize(int stackSize)}\\
		Sets the size of \il{LLStack} to \il{stackSize}.
	\item\il{public boolean isEmpty()}\\
		This method returns \il{True} if \il{LLStack} is empty; \il{False} otherwise.
	\item\il{public void emptyStack()}\\
		This method empties the \il{LLStack} by setting \il{top} to \il{null} and \il{stackSize} to \il{0}.
	\item\il{public void push(E obj)}\\
		This method pushes a new \il{top} with data \il{obj} onto the \il{LLStack} and increments \il{stackSize}.
	\item\il{public E pop()}\\
		This method pops the current \il{top}'s data off of \il{LLStack} and returns it. If \il{LLStack} is empty, returns \il{null}.
	\item\il{public E peek()}\\
		This method returns the current \il{top}'s data without changing \il{LLStack}, or \il{null} if \il{LLStack} is empty.
	\item\il{public String toString()}\\
		This method creates and returns a \il{String} with the contents of \il{LLStack}. If \il{LLStack} is empty, the method returns \il{"Empty"}.
	\item\il{public String gnirtSot()}\\
		This method does the same thing as \il{toString()} but with the elements of \il{LLStack} displayed in reverse.
\end{itemize}
\subsection*{\il{QueueSpecs<E>}}
This class contains the following method definitions that \il{StackQ} implements:
\begin{itemize}
	\item\il{public boolean isEmpty()}
	\item\il{public void emptyQueue()}
	\item\il{public void enQ(E obj)}
	\item\il{public E deQ()}
	\item\il{public E peek()}
\end{itemize}
\subsection*{\il{StackQ<E>}}
\begin{itemize}
	\item\il{private LLStackQ<E> enQStack}\\
		The \il{LLStack} onto which enqueued items will be pushed.
	\item\il{private LLStackQ<E> deQStack}\\
		The \il{LLStack} from which dequeued items will be popped.
	\item\il{public StackQ()}\\
		Default constructor for \il{StackQ}.
		
	\item\il{public int getQueueSize()}\\
		Returns the sum of \il{enQStack.getStackSize()} and \il{deQStack.getStackSize()}.
	\item\il{private void reStack()}\\
		This method sequentially pops the \il{top} off of \il{enQStack} and pushes it to \il{deQStack} until \il{enQStack} is empty.
		
	\item\il{public boolean isEmpty()}\\
		This method returns \il{True} if \il{StackQ} is empty; \il{False} otherwise. \il{enQStack}'s and \il{deQStack}'s \il{isEmpty()} will be called to facilitate this.
	\item\il{public void emptyQueue()}\\
		This method empties the \il{StackQ} by calling \il{emptyStack()} on \il{enQStack} and \il{deQStack}.
	\item\il{public void enQ(E obj)}\\
		This method calls \il{enQStack}'s \il{push()} to place \il{obj} on \il{enQStack}. 
	\item\il{public E deQ()}\\
		This method pops the current \il{top}'s data off of \il{deQStack} and returns it. If \il{deQStack} is empty, \il{reStack} is called. If \il{StackQ} is empty, returns \il{null}.
	\item\il{public E peek()}\\
		This method returns the current \il{top}'s data without changing \il{deQStack}. If \il{deQStack} is empty, \il{reStack} is called. If \il{StackQ} is empty, returns \il{null}.
	\item\il{public String toString()}\\
		This method calls \il{enQStack}'s and \il{deQStack}'s \il{toString} to create a \il{String} with \il{StackQ}'s contents with preserved order.
		
	\item\il{public String showEnQStack()}\\
		Returns the \il{String} from \il{enQStack.gnirtSot()}.
	\item\il{public String showDeQStack()}\\
		Returns the \il{String} from \il{deQStack.toString()}.
\end{itemize}

\subsection*{\il{DataClass}}
\begin{itemize}

	\item\il{private String dataName}\\
		This variable contains the name of the person associated with theinstance of the \il{DataClass} object.
		
	\item\il{private int dataID}\\
		This variable contains the ID number of the person associated with the instance of the \il{DataClass} object.
		\item\il{public DataClass(String name, int dataID)}\\
		The constructor for \il{DataClass}; the class has no default constructor, so \il{super()} is called to use the default constructor for \il{Object}. The arguments given to the constructor are used to initialize \il{dataName} and \il{dataID}. 
	\item\il{public String getDataName()}\\
		Returns the information stored in \il{dataName}, a \il{String}.		
	
	\item\il{public void setDataName()}\\
		Setter for \il{dataName}. 
		
	\item\il{public String getDataID()}\\
		Returns the information stored in \il{dataID}, an \il{int}.		
	
	\item\il{public void setDataID()}\\
		Setter for \il{dataID}.
	\item\il{public toString()}\\
		Returns a \il{String} containing the information from \il{dataName} and \il{dataID}, respectively. 
\end{itemize}

\subsection*{\il{Driver}}
\begin{itemize}
	\item\il{public static void main(String[] args)}\\
		The starting point for \il{Driver}, this method uses a \il{Scanner} for input, creates an instance of \il{StackQ} for storing and displaying \il{DataClass} information, and temporary variables for menu selection and new \il{DataClass} creation.
	\item\il{public String toString()}\\
		This method calls \il{enQStack}'s and \il{deQStack}'s \il{toString} to create a \il{String} with \il{StackQ}'s contents with preserved order.
		
	\item\il{public String showEnQStack()}\\
		Returns the \il{String} from \il{enQStack.gnirtSot()}.
	\item\il{public String showDeQStack()}\\
		Returns the \il{String} from \il{deQStack.toString()}.
\end{itemize}
\noindent\makebox[\linewidth]{\rule{\paperwidth}{0.4pt}}
	
\end{document}
