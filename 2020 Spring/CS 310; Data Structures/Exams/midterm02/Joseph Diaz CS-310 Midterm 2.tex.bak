\documentclass{article}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{bm}
\usepackage{amsthm}
\usepackage{enumerate}
\usepackage{graphicx}
\usepackage{psfrag}
\usepackage{color}
\usepackage{url}
\usepackage{listings}
\usepackage{xcolor}
\usepackage{tikz}
\usepackage{pdfpages}
\usetikzlibrary{positioning}
\tikzset{main node/.style={circle,fill=gray!20,draw,minimum size=.5cm,inner sep=0pt},}

\definecolor{codegreen}{rgb}{0,0.5,0}
\definecolor{codewhite}{rgb}{1,1,1}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{codeblack}{rgb}{0,0,0}
\definecolor{codeorange}{rgb}{0.8,0.4,0}

\lstdefinestyle{mystyle}{
    backgroundcolor=\color{codewhite},   
    commentstyle=\color{codegray},
    keywordstyle=\color{codegreen},
    numberstyle=\color{codegray},
    stringstyle=\color{codeorange},
    basicstyle=\ttfamily ,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=4
}
\lstset{style=mystyle}


\setlength{\hoffset}{-1in}
\addtolength{\textwidth}{1.5in}
\setlength{\voffset}{-1in}
\addtolength{\textheight}{1.5in}
\newcommand{\be}{\begin{enumerate}}
\newcommand{\ee}{\end{enumerate}}
\newcommand{\BigO}[1]{\ensuremath\mathcal{O}\left(#1\right)}
\newcommand{\il}[1]{\lstinline!#1!}
\newcommand{\gnorm}[1]{\left|\left|#1\right|\right|}
\newcommand{\abs}[1]{\left|#1\right|}
\newcommand{\parens}[1]{\left(#1\right)}
\newcommand{\bracks}[1]{\left\{#1\right\}}
\newcommand{\vep}{\varepsilon}
\newcommand{\ceiling}[1]{\left\lceil#1\right\rceil}

\begin{document}
	\begin{center}
		\textbf{Spring 2020, CS 310:\ Midterm 2} \\
		\textbf{Due:\ Tuesday, April 7th, 2020} \\
		\textbf{Joseph Diaz: 819947915}
	\end{center}
\noindent\makebox[\linewidth]{\rule{\paperwidth}{0.4pt}}
\be[1.] 
	\item The following code for a binary search tree is given:
	\begin{lstlisting}[language=java]
public class TreeNode<K extends Comparable<K>,V>
{
	private K key;
	private V value;
	private TreeNode<K,V> leftChild;
	private TreeNode<K,V> rightChild;
}
public class BinarySearchTree<K extends Comparable<K>,V>
{
	private TreeNode<K,V> root;
	public void insert(K key, V value) { ... } 
	public void delete(K key) { ... } 
	public SomeType find(int key) { ... }
}
	\end{lstlisting}
	Assume that the method bodies are complete and work as intended.
Write \textbf{JAVA CODE} for the following:
	\be [(a)]
		\item Add a method \il{public int treeHeight()} to the \il{BinarySearchTree} class that computes the height of the tree.
		
		\item Add method \il{public void deleteMax()} to the \il{BinarySearchTree} class that deletes the maximum element in the tree (or does nothing if the tree has no elements). You may want a helper method.

		\item For your answers in part (a) and part (b), give a worst-case $\BigO{n}$ running time, where $n$ is the number of nodes in the tree. Do not assume the tree is balanced.
		\be[(a)]
			\item The method calls itself twice recursively for every call, so the worst case running time is $\BigO{2^n}$.
			
			\item The method traverses from the root down to right most leaf of the BST, so every iteration of the internal while loop cuts the number of elements in half; giving this method a worst-case running time of $\BigO{\log n}$.
		\ee

	\ee
	\begin{lstlisting}[language=java]
public class BinarySearchTree<K extends Comparable<K>,V>
{
	private TreeNode<K,V> root;
	public void insert(K key, V value) { ... } 
	public void delete(K key) { ... } 
	public SomeType find(int key) { ... }
	
	public int treeHeight()
	{
		return nodeHeight(this.getRoot());
	}
	public int nodeHeight(TreeNode<K,V> node)
	{
		if(node == null)
			return 0;
		else
		{
			int leftSubHeight = 
							nodeHeight(node.getLeftChild()) + 1;
			int rightSubHeight = 
							nodeHeight(node.getRightChild()) + 1;
			
			if(leftSubHeight > rightSubHeight)
				return leftSubHeight;
			else
				return rightSubHeight;
		}		
			
	}	
	
	public void deleteMax()
	{
		if(this.getRoot() != null)
		{
			TreeNode<K,V> temp = this.getRoot();
			while(temp.getRightChild() != null)
			{
				temp = temp.getRightChild();
			}
			temp = null;
		}
	}
}
	\end{lstlisting}
	\item 
	\be[(a)] 
		\item What is the minimum and maximum number of nodes in a balanced AVL tree of height 5? (Hint: the height of a tree consisting of a single node is 0) 
Give an exact number (with no exponents) for your answers.
\begin{itemize}
	\item[Minimum:] 20, this can derived by using the recurrence relation
	$$n_{min}(h) = 1 + n_{min}(h-1) + n_{min}(h-2)$$
	Where $n_{min}(h)$ is the smallest number of nodes in an AVL tree of height $h$, with base cases $n_{min}(0) = 1$ (just a single root node), and $n_{min}(1) = 2$ (a root node with a single child). The rationale behind the recurrence relation is that $1$ stands for the root, $n_{min}(h-1)$ is the number of nodes in the subtree of height $h-1$ and $n_{min}(h-2)$ is the number of nodes in the subtree of height $h-2$; those are the heights we're interested in because they minimize the number of nodes and don't upset the balancing condition. With this:
	$$n_{min}(5) = 20$$
	
	\item[Maximum:] 63, this can be calculated using the formula for the maximum number of nodes in a binary tree of height $h$: $n_{max}(h) = 2^{h+1} - 1$. With that:
	$$n_{max}(5) = 64 - 1 = 63$$
	\end{itemize}

		\item What is the minimum and maximum number of nodes in a full tree of height 6? 
Give an exact number (with no exponents) for your answers â€“ not a formula.
	\begin{itemize}
		\item[Minimum:]	13, this can derived by using the recurrence relation
	$$n_{min}(h) = 2 + n_{min}(h-1)$$
	Where $n_{min}(h)$ is the smallest number of nodes in a full binary tree of height $h$, with base case $n_{min}(0) = 1$ (just a single root node). The rationale behind the recurrence relation is that $2$ stands for the root and one subtree of height $0$, while $n_{min}(h-1)$ is the number of nodes in the other subtree of height $h-1$; in this way, the tree with height $h$ has only nodes that have 0 or 2 children. With this:
	$$n_{min}(6) = 13$$ 
	
		\item[Maximum:] 127, this can be calculated using the same formula from (a): $n_{max}(h) = 2^{h+1} - 1$. With that:
	$$n_{max}(6) = 128 - 1 = 127$$
	\end{itemize}

		\item What is the minimum and maximum number of non-leaf nodes in a complete tree of height 5? 
Give an exact number (with no exponents) for your answers.
	\begin{itemize}
		\item[Minimum:] 16, this can be calculated by considering a Perfect Binary Tree of height 4. This tree has $2^5 - 1 = 31$ nodes with $2^4 = 16$ leaves. If we add a left child to the left most node in tree, then we now have a 32 node complete binary tree of height 5 that has the same number of leaves as the tree before. If we remove any node from this tree, then it will either no longer have height 5 or no longer be complete, so we may conclude this tree has been ``minimized''. So the minimum number of internal nodes in a complete binary tree of height 5 is 16.
		
		\item[Maximum:] 31, this can be calculated by considering the number of nodes in a Perfect Binary Tree of height 5 (63) and subtracting the number of leaves on the tree ($2^5 = 32$). 
		$$n_{max}(5) = 2^6 - 1 - 2^5  = 63 - 32 = 31$$
	\end{itemize}

		\item What is the depth of node P in the tree shown below:
		\begin{figure}[h]
		\centering
  		\includegraphics[width=.5\linewidth]{"PTree".jpg}
		\end{figure}
		$P$ has a depth of 3.
		
		\item Give a Pre-Order traversal of the tree shown above in (d).
		$$\left[C,\ W,\ J,\ Y,\ Z,\ X,\ A,\ P\right]$$
		
		\item Given the following six trees a through f:
		\begin{figure}[h]
		\centering
  		\includegraphics[width=.9\linewidth]{"AthroughF".jpg}
		\end{figure}
		List the letters of all of the trees that have the following properties: (Note: It is possible that none of the trees above have the given property, it is also possible that some trees have more than one of the following properties.)
		\begin{itemize}
			\item[Full:] a, c, f
			
			\item[Complete:] a, f
			
			\item[AVL Balanced:] a, c, e, f
			
		\end{itemize}
	\ee
	
	\item 
	\be[(a)]
		\item Draw the AVL tree that results from inserting the keys 
	$$20,\ 30,\ 90,\ 50,\ 40,\ 35,\ 10,\ 37,\ 31,\ 34$$
	into an initially empty AVL tree. 
Draw all intermediate trees and label all the rotations that happen.\\\\
\textbf{Drawings at end of pdf.}\\\\
		\item Indicate for each of the following statements if it is true or false. You must justify your answers to get credit. 
		\begin{itemize}
			\item The subtree of the root of a red-black tree is always itself a red-black tree. (Here, the definition of red-black tree is as I have given in class and as described in the textbook.)\\\\
			False; the root of a red-black tree must always be black and either subtree would have a new root that is red.
			
			\item The sibling of a null child reference in a red-black tree is either another null child reference or a red node.\\\\
			False; the parent of the null child reference could be a red node, in which case, the sibling of the null child reference could be a black node.
			\item The worst case time complexity of the insert operation into an AVL tree is $\BigO{\log n}$, where $n$ is the number of nodes in the tree.\\\\
			True; the strong balance conditions that AVL tree's enforce guarantee that the worst-case complexity of insertion and deletion are $\BigO{\log n}$.

		\end{itemize}
	\ee
	
	\item Given the following integer elements:
	$$30,\ 65,\ 22,\ 40,\ 15,\ 70,\ 80,\ 60,\ 55,\ 10$$
	For (a) and (b), show all intermediate steps for full credit. You do not need to show the array representation of the heap.
	\be[(a)]
		\item Draw the tree representation of the heap that results when all of the above elements are added (in the given order) to an initially empty maximum binary heap. Circle the final tree that results from performing the additions.
		\\\\
\textbf{Drawings at end of pdf.}\\\\
		
		\item After adding all the elements, perform 2 removes on the heap. Circle the tree that results after the two elements are removed.
		\\\\
\textbf{Drawings at end of pdf.}\\\\
	\ee
	
	\item This problem implements a minimum priority queue using a queue. The queue is already implemented with a linked list in the \il{LinkedListQueue} class. Elements are added to the priority queue by being put at the end of the queue. The add method of the queue-based priority queue is implemented below. Finish the implementation of the class \il{IntQueuePQ}, a priority queue implemented using a queue, by \textbf{writing the remove method (Write JAVA CODE)}.\\
	\textbf{Method description:}
	\begin{itemize}
		\item The remove method finds, removes, and returns the minimum element from the priority queue. 
		
		\item If the priority queue contains no elements and the remove method is called an IllegalStateException is thrown.
	\end{itemize}
	In order to write remove you may call any of the methods declared by the \il{IntQueue} interface on the queue instance variable found in \il{IntQueuePQ}. However, \textbf{you may not use any additional data structures or abstract data types} other than queue declared in the \il{IntQueuePQ} class in order to solve this problem.
	\begin{lstlisting}[language=java]
public interface IntPriorityQueue 
{ 
	public void add(int value); 
	public int remove(); 
} 
public interface IntQueue 
{ 
	public boolean isEmpty(); 
	public void enqueue(int i); 
	public int dequeue(); 
	public int size(); 
} 
public class IntQueuePQ implements IntPriorityQueue 
{ 
	private IntQueue queue; 
	public IntQueuePQ() 
	{ 
		queue = new LinkedListQueue(); 
	} 
	public void add(int value) 
	{ 
		queue.enqueue(value); 
	}

 	public int remove() throws IllegalStateException
 	{
 		return this.dequeue();
 	}
} 

	\end{lstlisting}

\ee
\noindent\makebox[\linewidth]{\rule{\paperwidth}{0.4pt}}
	
\end{document}
