lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(1/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(1/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(1/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(1/38)
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
if(runif(1) < p) # generate Bernoulli with probability p
break
streak = streak + 1 # tally streak
}
return(streak)
}
oneSpin(20/38)
streakHist = function(n,p)
{
streaks = replicate(n, oneSpin(p))
hist(streaks, br=seq(min(streaks)-0.5, max(streaks)+0.5))
}
streakHist(10000, 20/38)
streakHist = function(n,p)
{
streaks = replicate(n, oneSpin(p))
return(streaks)
}
winstreaks = streakHist(10000, 20/38)
hist(winstreaks, br=seq(min(winstreaks)-0.5, max(winstreaks)+0.5))
oneSpin = function(p)
{
streak = 0
lose = 0
while(TRUE)
{
streak = streak + 1 # tally streak
if(runif(1) < p) # generate Bernoulli with probability p
break
}
return(streak)
}
oneSpin(20/38)
simnum = 1000
p = 0.6; r = 10  # for point of comparison with the negative binomial, we will use r here
y=0
for(sims in 1:simnum)
{
pmf=(1-p)^r; cdf=pmf; # pmf and cdf
j=0;
u=runif(1) # uniform random variate
# find Binomial variate
while(u >= cdf)
{
pmf=((r-j)/(j+1))*(p/(1-p))*pmf # recursion relation
cdf=cdf + pmf # compute cdf
j=j+1
}
y[sims]=j
}
y
simnum = 1000
p = 0.6; r = 10  # for point of comparison with the negative binomial, we will use r here
y=0
for(sims in 1:simnum)
{
pmf=(1-p)^r; cdf=pmf; # pmf and cdf
j=0;
u=runif(1) # uniform random variate
# find Binomial variate
while(u >= cdf)
{
pmf=((r-j)/(j+1))*(p/(1-p))*pmf # recursion relation
cdf=cdf + pmf # compute cdf
j=j+1
}
y[sims]=j
}
rTrials = function(p,r)
{
pmf = (1-p)^r
cdf = pmf
j = 0
u = runif(1)
while(u >= cdf)
{
pmf = ((r-j)/(j+1))*(p/(1-p))*pmf
cdf = cdf + pmf
j = j + 1
}
return(j)
}
NegBinSim = function(p, n, r)
{
return(replicate(n, rTrials(p,r)))
}
NegBinSim(.5, 10000, 5)
rTrials = function(p,r)
{
pmf = (1-p)^r
cdf = pmf
j = 0
u = runif(1)
while(u >= cdf)
{
pmf = ((r-j)/(j+1))*(p/(1-p))*pmf
cdf = cdf + pmf
j = j + 1
}
return(j)
}
NegBinSim = function(p, n, r)
{
return(replicate(n, rTrials(p,r)))
}
NegBinSim(.5, 10000, 40)
rTrials = function(p,r)
{
pmf = (1-p)^r
cdf = pmf
j = 0
u = runif(1)
while(u >= cdf)
{
pmf = ((r-j)/(j+1))*(p/(1-p))*pmf
cdf = cdf + pmf
j = j + 1
}
return(j)
}
NegBinSim = function(p, n, r)
{
return(replicate(n, rTrials(p,r)))
}
NegBinSim(.5, 10000, 10)
hist(results)
rTrials = function(p,r)
{
pmf = (1-p)^r
cdf = pmf
j = 0
u = runif(1)
while(u >= cdf)
{
pmf = ((r-j)/(j+1))*(p/(1-p))*pmf
cdf = cdf + pmf
j = j + 1
}
return(j)
}
NegBinSim = function(p, n, r)
{
return(replicate(n, rTrials(p,r)))
}
results = NegBinSim(.5, 10000, 10)
hist(results)
knitr::opts_chunk$set(echo = TRUE)
sum(winstreaks)
oneSpin = function(p)
{
streak = 0
while(TRUE)
{
streak = streak + 1 # tally streak
if(runif(1) < p) # generate Bernoulli with probability p
break
}
return(streak)
}
streakers = function(n,p)
{
streaks = replicate(n, oneSpin(p))
return(streaks)
}
p = 20/38
n = 1000
winstreaks = streakers(n, p)
hist(winstreaks, br=seq(min(winstreaks)-0.5, max(winstreaks)+0.5))
something = replicate(n, streakers(n,p))
something
something = replicate(n, streakers(1,p))
something
something = replicate(n, streakers(2,p))
something
something = replicate(n, streakers(1,p))
something
something = replicate(n, sum(streakers(1,p)))
something
something = replicate(n, sum(streakers(1,p)))
hist(something, br=seq(min(something)-0.5, max(something)+0.5))
something = replicate(n, sum(streakers(n,p)))
hist(something, br=seq(min(something)-0.5, max(something)+0.5))
something = replicate(n, sum(streakers(n,p)))
hist(something, br=seq(min(something)-0.5, max(something)+0.5))
something = replicate(n, mean(streakers(n,p)))
hist(something, br=seq(min(something)-0.5, max(something)+0.5))
knitr::opts_chunk$set(echo = TRUE)
sumOfGeo= function(r, p)
{
runs = 0
trials = 0
while(runs < r)
{
trials = trials + oneSpin(p)
runs = runs + 1
}
return(trials)
}
sum = replicate(n, sumOfGeo(10, p))
sumOfGeo= function(r, p)
{
runs = 0
trials = 0
while(runs < r)
{
trials = trials + oneSpin(p)
runs = runs + 1
}
return(trials)
}
sumGeo = replicate(n, sumOfGeo(10, p))
hist(sumGeo, br=seq(min(sumGeo)-0.5, max(sumGeo)+0.5))
hist(trials, br=seq(min(trials)-0.5, max(trials)+0.5))
help(proc.time)
hist(trials, br=seq(min(trials)-0.5, max(trials)+0.5))
hist(trials, br=seq(min(trials)-0.5, max(trials)+0.5))
rTrials = function(p,r)
{
pmf = p^r
cdf = pmf
j = r
u = runif(1)
while(u >= cdf)
{
pmf = ((j*(1-p))/(j+1-r))*pmf
cdf = cdf + pmf
j = j + 1
}
return(j)
}
NegBinSim = function(p, n, r)
{
return(replicate(n, rTrials(p,r)))
}
trials = NegBinSim(p, n, r)
hist(trials, br=seq(min(trials)-0.5, max(trials)+0.5))
rTrials = function(p,r)
{
pmf = (1-p)*p^r
cdf = pmf
j = r
u = runif(1)
while(u >= cdf)
{
pmf = ((j*(1-p))/(j+1-r))*pmf
cdf = cdf + pmf
j = j + 1
}
return(j)
}
NegBinSim = function(p, n, r)
{
return(replicate(n, rTrials(p,r)))
}
trials = NegBinSim(p, n, r)
rTrials = function(p,r)
{
pmf = (1-p)*p^r
cdf = pmf
j = r
u = runif(1)
while(u >= cdf)
{
pmf = ((j*(1-p))/(j+1-r))*pmf
cdf = cdf + pmf
j = j + 1
}
return(j)
}
NegBinSim = function(p, n, r)
{
return(replicate(n, rTrials(p,r)))
}
trials = NegBinSim(p, n, r)
